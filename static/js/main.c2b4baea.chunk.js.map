{"version":3,"sources":["card.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","props","className","label","src","img","alt","ingre","map","a","target","href","url","App","useState","item","setItem","search","setSearch","useEffect","fetch","catch","err","console","log","then","res","json","data","hits","getData","id","type","name","placeholder","onClick","e","preventDefault","document","querySelector","value","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kPAsBeA,G,MApBF,SAACC,GAEV,OACI,yBAAKC,UAAU,QACX,4BAAKD,EAAME,OACX,yBAAKC,IAAKH,EAAMI,IAAKC,IAAI,KACzB,2CACA,yBAAKJ,UAAU,eACVD,EAAMM,MAAMC,KAAI,SAAAC,GAAC,OAAG,kCAAQA,OAEjC,yBAAKP,UAAU,QACX,4BAAI,uBAAGQ,OAAO,SAAQC,KAAMV,EAAMW,KAA9B,wBCyDLC,MAzDf,WACE,IADa,EAKSC,mBAAS,IALlB,mBAKNC,EALM,KAKAC,EALA,OAMWF,mBAAS,WANpB,mBAMPG,EANO,KAMAC,EANA,KAoCb,OA5BAC,qBAAU,YAIZ,WACI,IACMP,EAAI,mCAAD,OADMK,EACN,mBAbE,WAaF,oBAZG,oCAaZG,MAAMR,GACHS,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAI,WACvBC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAOL,QAAQC,IAAII,GAOvBZ,EAAQY,EAAKC,MACbN,QAAQC,IAAIT,MAjBhBe,KACA,CAACb,IA2BD,yBAAKf,UAAU,YACb,yCACA,0BAAM6B,GAAG,eACP,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,4BAAQH,GAAG,SAASI,QAAS,SAACC,GAC5BA,EAAEC,iBACFnB,EAAUoB,SAASC,cAAc,gBAAvB,KAA+CC,SAF3D,WAODzB,EAAKP,KAAI,SAAAC,GAAC,OACT,kBAAC,EAAD,CAAQgC,IAAKhC,EAAC,OAAD,MAAsBJ,IAAKI,EAAC,OAAD,MAAsBN,MAAOM,EAAC,OAAD,MAAsBF,MAAOE,EAAC,OAAD,gBAAgCG,IAAKH,EAAC,OAAD,WClD3HiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASY,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.c2b4baea.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Recipe=(props)=>{\r\n\r\n    return(\r\n        <div className=\"card\">\r\n            <h2>{props.label}</h2>\r\n            <img src={props.img} alt=\"\"/>\r\n            <h4>Ingredients</h4>\r\n            <div className=\"ingredients\">\r\n                {props.ingre.map(a=>(<p>--  {a}</p>))}\r\n            </div>\r\n            <div className=\"link\">\r\n                <h3><a target=\"_blank\"href={props.url}>Get full Recipe</a></h3>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    );\r\n\r\n\r\n};\r\nexport default Recipe;","import React,{useState, useEffect} from 'react';\nimport './App.css';\nimport Recipe from './card';\n\n\n\n//npm run build\n\n\n\n\n\n\nfunction App() {\n  const APP_ID=\"64dd6a84\";\n  const APP_KEY=\"1deebeaaf7dd5502b15d6f0926d14fc9\";\n  \n  //we need to use states\n  const [item, setItem]=useState([]);\n  const[search,setSearch]=useState(\"chicken\");\n  \n  useEffect(()=>{\n    getData()\n  },[search])\n\nfunction  getData(){\n    var recipeName=search;\n    const url=`https://api.edamam.com/search?q=${recipeName}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    fetch(url)\n      .catch(err=>console.log(\"adsf\"))\n      .then(res=>res.json())\n      .then(data=>{console.log(data)\n        // var recipe_url=data[\"hits\"][0]['recipe']['url'];\n        // var recipe_calories=data[\"hits\"][0]['recipe']['calories'];\n        // var recipe_label=data[\"hits\"][0]['recipe']['label'];\n        // var recipe_ingredients=data[\"hits\"][0]['recipe']['ingredientLines']; //list\n\n        //console.log(data['hits'][0]);\n        setItem(data.hits);\n        console.log(item);\n        \n\n      }\n      )\n  };\n\n // getData();\n\n\n  return (\n    <div className=\"mainBody\">\n      <h1>Recipo.Co</h1>\n      <form id=\"search-form\">\n        <input type=\"text\" name=\"text\" placeholder=\"Chicken\"></input>\n        <button id=\"submit\" onClick={(e)=>{\n          e.preventDefault(); \n          setSearch(document.querySelector(\"#search-form\")['text'].value);\n         \n        }}>Submit</button>\n      </form>\n\n      {item.map(a=>(\n        <Recipe key={a['recipe']['label']} img={a['recipe']['image']} label={a['recipe']['label']} ingre={a['recipe']['ingredientLines']} url={a['recipe']['url']}/>\n      )) }\n      \n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}